// ! games-client.tsx ‚Äî —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∏–≥—Ä

"use client"

import { useEffect, useRef, useState } from "react"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"

// --------- –£—Ç–∏–ª–∏—Ç–∞ ---------
function shuffleArray<T>(array: T[]): T[] {
  const newArray = [...array]
  for (let i = newArray.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1))
    ;[newArray[i], newArray[j]] = [newArray[j], newArray[i]]
  }
  return newArray
}

const countries = [
  { name: "–§—Ä–∞–Ω—Ü–∏—è", capital: "–ü–∞—Ä–∏–∂", flag: "üá´üá∑" },
  { name: "–ì–µ—Ä–º–∞–Ω–∏—è", capital: "–ë–µ—Ä–ª–∏–Ω", flag: "üá©üá™" },
  { name: "–ò—Ç–∞–ª–∏—è", capital: "–†–∏–º", flag: "üáÆüáπ" },
  { name: "–°–®–ê", capital: "–í–∞—à–∏–Ω–≥—Ç–æ–Ω", flag: "üá∫üá∏" },
  { name: "–Ø–ø–æ–Ω–∏—è", capital: "–¢–æ–∫–∏–æ", flag: "üáØüáµ" },
  { name: "–ö–∞–Ω–∞–¥–∞", capital: "–û—Ç—Ç–∞–≤–∞", flag: "üá®üá¶" },
  { name: "–ö–∏—Ç–∞–π", capital: "–ü–µ–∫–∏–Ω", flag: "üá®üá≥" },
  { name: "–ë—Ä–∞–∑–∏–ª–∏—è", capital: "–ë—Ä–∞–∑–∏–ª–∏–∞", flag: "üáßüá∑" },
  { name: "–ê—Ä–≥–µ–Ω—Ç–∏–Ω–∞", capital: "–ë—É—ç–Ω–æ—Å-–ê–π—Ä–µ—Å", flag: "üá¶üá∑" },
  { name: "–ò—Å–ø–∞–Ω–∏—è", capital: "–ú–∞–¥—Ä–∏–¥", flag: "üá™üá∏" },
  { name: "–†–æ—Å—Å–∏—è", capital: "–ú–æ—Å–∫–≤–∞", flag: "üá∑üá∫" },
  { name: "–ï–≥–∏–ø–µ—Ç", capital: "–ö–∞–∏—Ä", flag: "üá™üá¨" },
  { name: "–ê–≤—Å—Ç—Ä–∞–ª–∏—è", capital: "–ö–∞–Ω–±–µ—Ä—Ä–∞", flag: "üá¶üá∫" },
]

// --------- –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ ---------
function CapitalQuiz() {
  const [questionIndex, setQuestionIndex] = useState(0)
  const [shuffledCountries, setShuffledCountries] = useState(shuffleArray(countries))
  const [score, setScore] = useState(() => parseInt(localStorage.getItem("quizScore") || "0"))
  const [finished, setFinished] = useState(false)

  const current = shuffledCountries[questionIndex]
  const options = shuffleArray([
    current.capital,
    ...shuffleArray(countries.filter(c => c.capital !== current.capital)).slice(0, 3).map(c => c.capital),
  ])

  const handleAnswer = (answer: string) => {
    if (answer === current.capital) {
      const newScore = score + 1
      setScore(newScore)
      localStorage.setItem("quizScore", newScore.toString())
    }
    if (questionIndex < shuffledCountries.length - 1) {
      setQuestionIndex((q) => q + 1)
    } else {
      setFinished(true)
    }
  }

  return (
    <Card>
      <CardHeader>
        <CardTitle>–°—Ç–æ–ª–∏—Ü–∞ –∫–∞–∫–æ–π —Å—Ç—Ä–∞–Ω—ã: {current.name} {current.flag}</CardTitle>
      </CardHeader>
      <CardContent className="flex flex-col gap-4">
        {finished ? (
          <div className="space-y-2">
            <p>–í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É!</p>
            <Badge>–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {score} –∏–∑ {shuffledCountries.length}</Badge>
          </div>
        ) : (
          options.map((option, idx) => (
            <Button key={idx} onClick={() => handleAnswer(option)}>{option}</Button>
          ))
        )}
      </CardContent>
    </Card>
  )
}

// --------- –ó–º–µ–π–∫–∞ ---------
function SnakeGame() {
  return (
    <Card>
      <CardHeader><CardTitle>–ó–º–µ–π–∫–∞ (–Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è)</CardTitle></CardHeader>
      <CardContent>
        <iframe
          title="snake"
          src="https://snake.hcodes.io"
          className="w-full aspect-video rounded-md border"
          sandbox="allow-scripts"
        />
      </CardContent>
    </Card>
  )
}

// --------- –¢–µ—Ç—Ä–∏—Å ---------
function TetrisGame() {
  return (
    <Card>
      <CardHeader><CardTitle>–¢–µ—Ç—Ä–∏—Å (–Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è)</CardTitle></CardHeader>
      <CardContent>
        <iframe
          title="tetris"
          src="https://tetris.hcodes.io"
          className="w-full aspect-video rounded-md border"
          sandbox="allow-scripts"
        />
      </CardContent>
    </Card>
  )
}

// --------- –ì–æ–Ω–∫–∏ ---------
function RacingGame() {
  return (
    <Card>
      <CardHeader><CardTitle>–ì–æ–Ω–∫–∏ (–Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è)</CardTitle></CardHeader>
      <CardContent>
        <iframe
          title="racing"
          src="https://racing.hcodes.io"
          className="w-full aspect-video rounded-md border"
          sandbox="allow-scripts"
        />
      </CardContent>
    </Card>
  )
}

// --------- –ì–ª–∞–≤–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç ---------
export default function GamesClient() {
  const [tab, setTab] = useState("quiz")

  return (
    <div className="space-y-4">
      <Tabs value={tab} onValueChange={setTab} className="w-full">
        <TabsList>
          <TabsTrigger value="quiz">üß† –í–∏–∫—Ç–æ—Ä–∏–Ω–∞</TabsTrigger>
          <TabsTrigger value="snake">üêç –ó–º–µ–π–∫–∞</TabsTrigger>
          <TabsTrigger value="tetris">üß© –¢–µ—Ç—Ä–∏—Å</TabsTrigger>
          <TabsTrigger value="race">üèéÔ∏è –ì–æ–Ω–∫–∏</TabsTrigger>
        </TabsList>

        <TabsContent value="quiz">
          <CapitalQuiz />
        </TabsContent>
        <TabsContent value="snake">
          <SnakeGame />
        </TabsContent>
        <TabsContent value="tetris">
          <TetrisGame />
        </TabsContent>
        <TabsContent value="race">
          <RacingGame />
        </TabsContent>
      </Tabs>
    </div>
  )
}
