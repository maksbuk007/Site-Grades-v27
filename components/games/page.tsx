"use client"

import { useState, useEffect, useRef, useCallback } from "react"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { ArrowDown, ArrowLeft, ArrowRight, ArrowUp } from "lucide-react"

export default function GamesPage() {
  return (
    <div className="container mx-auto py-6">
      <div className="flex flex-col gap-6">
        <div>
          <h1 className="text-3xl font-bold tracking-tight">–ò–≥—Ä—ã</h1>
          <p className="text-muted-foreground">–û—Ç–¥–æ—Ö–Ω–∏—Ç–µ –∏ —Ä–∞–∑–≤–ª–µ–∫–∏—Ç–µ—Å—å —Å –Ω–∞—à–∏–º–∏ –ø—Ä–æ—Å—Ç—ã–º–∏ –æ–Ω–ª–∞–π–Ω-–∏–≥—Ä–∞–º–∏</p>
        </div>

        <Tabs defaultValue="tictactoe" className="w-full">
          <TabsList className="grid w-full grid-cols-5">
            <TabsTrigger value="tictactoe">–ö—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏</TabsTrigger>
            <TabsTrigger value="memory">–ò–≥—Ä–∞ –Ω–∞ –ø–∞–º—è—Ç—å</TabsTrigger>
            <TabsTrigger value="quiz">–í–∏–∫—Ç–æ—Ä–∏–Ω–∞</TabsTrigger>
            <TabsTrigger value="snake">–ó–º–µ–π–∫–∞</TabsTrigger>
            <TabsTrigger value="blockblast">–¢–µ—Ç—Ä–∏—Å</TabsTrigger>
          </TabsList>

          <TabsContent value="tictactoe" className="mt-6">
            <TicTacToe />
          </TabsContent>

          <TabsContent value="memory" className="mt-6">
            <MemoryGame />
          </TabsContent>

          <TabsContent value="quiz" className="mt-6">
            <Quiz />
          </TabsContent>

          <TabsContent value="snake" className="mt-6">
            <SnakeGame />
          </TabsContent>

          <TabsContent value="blockblast" className="mt-6">
            <BlockBlastGame />
          </TabsContent>
        </Tabs>
      </div>
    </div>
  )
}

// –ö—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏
function TicTacToe() {
  const [board, setBoard] = useState(Array(9).fill(null))
  const [xIsNext, setXIsNext] = useState(true)
  const [gameOver, setGameOver] = useState(false)

  const handleClick = (i: number) => {
    if (board[i] || gameOver) return

    const newBoard = [...board]
    newBoard[i] = xIsNext ? "X" : "O"
    setBoard(newBoard)
    setXIsNext(!xIsNext)

    const winner = calculateWinner(newBoard)
    if (winner || newBoard.every((square) => square)) {
      setGameOver(true)
    }
  }

  const resetGame = () => {
    setBoard(Array(9).fill(null))
    setXIsNext(true)
    setGameOver(false)
  }

  const winner = calculateWinner(board)
  const status = winner
    ? `–ü–æ–±–µ–¥–∏—Ç–µ–ª—å: ${winner}`
    : board.every((square) => square)
      ? "–ù–∏—á—å—è!"
      : `–°–ª–µ–¥—É—é—â–∏–π —Ö–æ–¥: ${xIsNext ? "X" : "O"}`

  return (
    <Card>
      <CardHeader>
        <CardTitle>–ö—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏</CardTitle>
        <CardDescription>–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –∏–≥—Ä–∞ –¥–ª—è –¥–≤—É—Ö –∏–≥—Ä–æ–∫–æ–≤</CardDescription>
      </CardHeader>
      <CardContent>
        <div className="flex flex-col items-center">
          <div className="mb-4 text-lg font-medium">{status}</div>
          <div className="grid grid-cols-3 gap-2">
            {board.map((square, i) => (
              <Button key={i} variant="outline" className="h-20 w-20 text-2xl" onClick={() => handleClick(i)}>
                {square}
              </Button>
            ))}
          </div>
        </div>
      </CardContent>
      <CardFooter className="flex justify-center">
        <Button onClick={resetGame}>–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ</Button>
      </CardFooter>
    </Card>
  )
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
function calculateWinner(squares: Array<string | null>) {
  const lines = [
    [0, 1, 2],
    [3, 4, 5],
    [6, 7, 8], // –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏
    [0, 3, 6],
    [1, 4, 7],
    [2, 5, 8], // –≤–µ—Ä—Ç–∏–∫–∞–ª–∏
    [0, 4, 8],
    [2, 4, 6], // –¥–∏–∞–≥–æ–Ω–∞–ª–∏
  ]

  for (const [a, b, c] of lines) {
    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {
      return squares[a]
    }
  }

  return null
}

// –ò–≥—Ä–∞ –Ω–∞ –ø–∞–º—è—Ç—å
function MemoryGame() {
  const emojis = ["üê∂", "üê±", "üê≠", "üêπ", "üê∞", "ü¶ä", "üêª", "üêº"]
  const allEmojis = [...emojis, ...emojis]

  const [cards, setCards] = useState(() => {
    return shuffle(allEmojis).map((emoji, index) => ({
      id: index,
      content: emoji,
      flipped: false,
      matched: false,
    }))
  })

  const [flippedCards, setFlippedCards] = useState<number[]>([])
  const [moves, setMoves] = useState(0)
  const [gameCompleted, setGameCompleted] = useState(false)

  const handleCardClick = (id: number) => {
    // –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–ª–∏–∫, –µ—Å–ª–∏ –∫–∞—Ä—Ç–∞ —É–∂–µ –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–∞ –∏–ª–∏ —Å–æ–≤–ø–∞–ª–∞
    if (cards[id].flipped || cards[id].matched) return

    // –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç—Ä–µ—Ç–∏–π –∫–ª–∏–∫, –ø–æ–∫–∞ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –ø–µ—Ä–≤—ã–µ –¥–≤–∞
    if (flippedCards.length === 2) return

    // –û–±–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞—Ä—Ç
    const newCards = [...cards]
    newCards[id].flipped = true
    setCards(newCards)

    // –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç—É –∫ –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç—ã–º
    const newFlippedCards = [...flippedCards, id]
    setFlippedCards(newFlippedCards)

    // –ï—Å–ª–∏ –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç—ã –¥–≤–µ –∫–∞—Ä—Ç—ã
    if (newFlippedCards.length === 2) {
      setMoves(moves + 1)

      // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
      const [firstId, secondId] = newFlippedCards
      if (cards[firstId].content === cards[secondId].content) {
        // –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ
        setTimeout(() => {
          const matchedCards = [...cards]
          matchedCards[firstId].matched = true
          matchedCards[secondId].matched = true
          setCards(matchedCards)
          setFlippedCards([])

          // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã
          if (matchedCards.every((card) => card.matched)) {
            setGameCompleted(true)
          }
        }, 500)
      } else {
        // –ù–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è, –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç—å –∫–∞—Ä—Ç—ã –æ–±—Ä–∞—Ç–Ω–æ
        setTimeout(() => {
          const resetCards = [...cards]
          resetCards[firstId].flipped = false
          resetCards[secondId].flipped = false
          setCards(resetCards)
          setFlippedCards([])
        }, 1000)
      }
    }
  }

  const resetGame = () => {
    setCards(
      shuffle(allEmojis).map((emoji, index) => ({
        id: index,
        content: emoji,
        flipped: false,
        matched: false,
      })),
    )
    setFlippedCards([])
    setMoves(0)
    setGameCompleted(false)
  }

  return (
    <Card>
      <CardHeader>
        <CardTitle>–ò–≥—Ä–∞ –Ω–∞ –ø–∞–º—è—Ç—å</CardTitle>
        <CardDescription>–ù–∞–π–¥–∏—Ç–µ –≤—Å–µ –ø–∞—Ä—ã –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫</CardDescription>
      </CardHeader>
      <CardContent>
        <div className="flex flex-col items-center">
          <div className="mb-4 flex items-center gap-4">
            <Badge variant="outline" className="text-sm">
              –•–æ–¥—ã: {moves}
            </Badge>
            {gameCompleted && <Badge className="bg-green-500">–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</Badge>}
          </div>
          <div className="grid grid-cols-4 gap-2">
            {cards.map((card) => (
              <Button
                key={card.id}
                variant="outline"
                className="h-16 w-16 text-2xl transition-all"
                onClick={() => handleCardClick(card.id)}
                disabled={card.matched}
              >
                {card.flipped || card.matched ? card.content : "?"}
              </Button>
            ))}
          </div>
        </div>
      </CardContent>
      <CardFooter className="flex justify-center">
        <Button onClick={resetGame}>–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ</Button>
      </CardFooter>
    </Card>
  )
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏—è –º–∞—Å—Å–∏–≤–∞
function shuffle<T>(array: T[]): T[] {
  const newArray = [...array]
  for (let i = newArray.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1))
    ;[newArray[i], newArray[j]] = [newArray[j], newArray[i]]
  }
  return newArray
}

// –í–∏–∫—Ç–æ—Ä–∏–Ω–∞
function Quiz() {
  const questions = [
    {
      question: "–ö–∞–∫–∞—è –ø–ª–∞–Ω–µ—Ç–∞ –±–ª–∏–∂–µ –≤—Å–µ–≥–æ –∫ –°–æ–ª–Ω—Ü—É?",
      options: ["–í–µ–Ω–µ—Ä–∞", "–ú–µ—Ä–∫—É—Ä–∏–π", "–ú–∞—Ä—Å", "–ó–µ–º–ª—è"],
      answer: 1,
    },
    {
      question: "–°–∫–æ–ª—å–∫–æ —Å—Ç–æ—Ä–æ–Ω —É –ø—è—Ç–∏—É–≥–æ–ª—å–Ω–∏–∫–∞?",
      options: ["4", "5", "6", "7"],
      answer: 1,
    },
    {
      question: '–ö–∞–∫–æ–π —ç–ª–µ–º–µ–Ω—Ç –æ–±–æ–∑–Ω–∞—á–∞–µ—Ç—Å—è —Å–∏–º–≤–æ–ª–æ–º "O"?',
      options: ["–ó–æ–ª–æ—Ç–æ", "–ö–∏—Å–ª–æ—Ä–æ–¥", "–û—Å–º–∏–π", "–û–ª–æ–≤–æ"],
      answer: 1,
    },
    {
      question: "–ö–∞–∫–∞—è —Å—Ç—Ä–∞–Ω–∞ —Å–∞–º–∞—è –±–æ–ª—å—à–∞—è –ø–æ –ø–ª–æ—â–∞–¥–∏?",
      options: ["–ö–∏—Ç–∞–π", "–°–®–ê", "–ö–∞–Ω–∞–¥–∞", "–†–æ—Å—Å–∏—è"],
      answer: 3,
    },
    {
      question: "–ö–∞–∫–æ–π —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —ç—Ç–æ–º –ø—Ä–æ–µ–∫—Ç–µ?",
      options: ["JavaScript", "Python", "TypeScript", "Java"],
      answer: 2,
    },
  ]

  const [currentQuestion, setCurrentQuestion] = useState(0)
  const [score, setScore] = useState(0)
  const [showResult, setShowResult] = useState(false)
  const [selectedOption, setSelectedOption] = useState<number | null>(null)
  const [answered, setAnswered] = useState(false)

  const handleAnswer = (optionIndex: number) => {
    if (answered) return

    setSelectedOption(optionIndex)
    setAnswered(true)

    if (optionIndex === questions[currentQuestion].answer) {
      setScore(score + 1)
    }

    setTimeout(() => {
      if (currentQuestion < questions.length - 1) {
        setCurrentQuestion(currentQuestion + 1)
        setSelectedOption(null)
        setAnswered(false)
      } else {
        setShowResult(true)
      }
    }, 1000)
  }

  const resetQuiz = () => {
    setCurrentQuestion(0)
    setScore(0)
    setShowResult(false)
    setSelectedOption(null)
    setAnswered(false)
  }

  return (
    <Card>
      <CardHeader>
        <CardTitle>–í–∏–∫—Ç–æ—Ä–∏–Ω–∞</CardTitle>
        <CardDescription>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è</CardDescription>
      </CardHeader>
      <CardContent>
        {showResult ? (
          <div className="flex flex-col items-center gap-4">
            <h3 className="text-xl font-bold">–†–µ–∑—É–ª—å—Ç–∞—Ç</h3>
            <p className="text-lg">
              –í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞ {score} –∏–∑ {questions.length} –≤–æ–ø—Ä–æ—Å–æ–≤
            </p>
            <div className="text-2xl">
              {score === questions.length
                ? "üéâ –û—Ç–ª–∏—á–Ω–æ!"
                : score >= questions.length / 2
                  ? "üëç –•–æ—Ä–æ—à–æ!"
                  : "üòï –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!"}
            </div>
          </div>
        ) : (
          <div className="flex flex-col gap-4">
            <div className="flex justify-between">
              <Badge variant="outline">
                –í–æ–ø—Ä–æ—Å {currentQuestion + 1} –∏–∑ {questions.length}
              </Badge>
              <Badge variant="outline">–°—á–µ—Ç: {score}</Badge>
            </div>
            <h3 className="text-lg font-medium">{questions[currentQuestion].question}</h3>
            <div className="flex flex-col gap-2">
              {questions[currentQuestion].options.map((option, index) => (
                <Button
                  key={index}
                  variant={
                    selectedOption === index
                      ? index === questions[currentQuestion].answer
                        ? "default"
                        : "destructive"
                      : answered && index === questions[currentQuestion].answer
                        ? "default"
                        : "outline"
                  }
                  className="justify-start text-left"
                  onClick={() => handleAnswer(index)}
                  disabled={answered}
                >
                  {option}
                </Button>
              ))}
            </div>
          </div>
        )}
      </CardContent>
      <CardFooter className="flex justify-center">
        {showResult && <Button onClick={resetQuiz}>–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ</Button>}
      </CardFooter>
    </Card>
  )
}

// –ó–º–µ–π–∫–∞
function SnakeGame() {
  const GRID_SIZE = 20
  const CELL_SIZE = 20
  const INITIAL_SPEED = 150
  const SPEED_INCREMENT = 10
  const MAX_SPEED = 50

  const canvasRef = useRef<HTMLCanvasElement>(null)
  const [score, setScore] = useState(0)
  const [gameOver, setGameOver] = useState(false)
  const [isPaused, setIsPaused] = useState(false)
  const [speed, setSpeed] = useState(INITIAL_SPEED)
  const [highScore, setHighScore] = useState(0)

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–º–µ–π–∫–∏
  const [snake, setSnake] = useState([
    { x: 10, y: 10 },
    { x: 9, y: 10 },
    { x: 8, y: 10 },
  ])
  const [food, setFood] = useState({ x: 15, y: 10 })
  const [direction, setDirection] = useState("RIGHT")
  const [nextDirection, setNextDirection] = useState("RIGHT")

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –µ–¥—ã
  const generateFood = useCallback(() => {
    const x = Math.floor(Math.random() * GRID_SIZE)
    const y = Math.floor(Math.random() * GRID_SIZE)
    return { x, y }
  }, [])

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–π
  const checkCollision = useCallback(
    (head: { x: number; y: number }) => {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏—è —Å–æ —Å—Ç–µ–Ω–∞–º–∏
      if (head.x < 0 || head.x >= GRID_SIZE || head.y < 0 || head.y >= GRID_SIZE) {
        return true
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏—è —Å —Å–∞–º–æ–π —Å–æ–±–æ–π
      for (let i = 1; i < snake.length; i++) {
        if (head.x === snake[i].x && head.y === snake[i].y) {
          return true
        }
      }

      return false
    },
    [snake],
  )

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–ª–∞–≤–∏—à
  useEffect(() => {
    const handleKeyDown = (e: KeyboardEvent) => {
      if (gameOver) return

      switch (e.key) {
        case "ArrowUp":
          if (direction !== "DOWN") setNextDirection("UP")
          break
        case "ArrowDown":
          if (direction !== "UP") setNextDirection("DOWN")
          break
        case "ArrowLeft":
          if (direction !== "RIGHT") setNextDirection("LEFT")
          break
        case "ArrowRight":
          if (direction !== "LEFT") setNextDirection("RIGHT")
          break
        case " ":
          setIsPaused(!isPaused)
          break
        default:
          break
      }
    }

    window.addEventListener("keydown", handleKeyDown)
    return () => window.removeEventListener("keydown", handleKeyDown)
  }, [direction, gameOver, isPaused])

  // –ò–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª
  useEffect(() => {
    if (gameOver || isPaused) return

    const moveSnake = () => {
      setDirection(nextDirection)

      const newSnake = [...snake]
      const head = { ...newSnake[0] }

      // –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –≥–æ–ª–æ–≤—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
      switch (nextDirection) {
        case "UP":
          head.y -= 1
          break
        case "DOWN":
          head.y += 1
          break
        case "LEFT":
          head.x -= 1
          break
        case "RIGHT":
          head.x += 1
          break
        default:
          break
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–π
      if (checkCollision(head)) {
        setGameOver(true)
        if (score > highScore) {
          setHighScore(score)
        }
        return
      }

      // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –≥–æ–ª–æ–≤—ã
      newSnake.unshift(head)

      // –ü—Ä–æ–≤–µ—Ä–∫–∞, —Å—ä–µ–ª–∞ –ª–∏ –∑–º–µ–π–∫–∞ –µ–¥—É
      if (head.x === food.x && head.y === food.y) {
        // –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—á–µ—Ç–∞
        const newScore = score + 1
        setScore(newScore)

        // –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏
        if (speed > MAX_SPEED) {
          setSpeed(Math.max(speed - SPEED_INCREMENT, MAX_SPEED))
        }

        // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–π –µ–¥—ã
        let newFood = generateFood()
        // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –µ–¥–∞ –Ω–µ –ø–æ—è–≤–ª—è–µ—Ç—Å—è –Ω–∞ –∑–º–µ–π–∫–µ
        while (newSnake.some((segment) => segment.x === newFood.x && segment.y === newFood.y)) {
          newFood = generateFood()
        }
        setFood(newFood)
      } else {
        // –ï—Å–ª–∏ –µ–¥–∞ –Ω–µ —Å—ä–µ–¥–µ–Ω–∞, —É–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–µ–≥–º–µ–Ω—Ç
        newSnake.pop()
      }

      setSnake(newSnake)
    }

    // –ó–∞–ø—É—Å–∫ –∏–≥—Ä–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞
    const gameInterval = setInterval(moveSnake, speed)
    return () => clearInterval(gameInterval)
  }, [snake, food, direction, nextDirection, gameOver, isPaused, checkCollision, generateFood, score, speed, highScore])

  // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∏–≥—Ä—ã
  useEffect(() => {
    const canvas = canvasRef.current
    if (!canvas) return

    const ctx = canvas.getContext("2d")
    if (!ctx) return

    // –û—á–∏—Å—Ç–∫–∞ —Ö–æ–ª—Å—Ç–∞
    ctx.clearRect(0, 0, canvas.width, canvas.height)

    // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∑–º–µ–π–∫–∏
    snake.forEach((segment, index) => {
      ctx.fillStyle = index === 0 ? "#4CAF50" : "#8BC34A"
      ctx.fillRect(segment.x * CELL_SIZE, segment.y * CELL_SIZE, CELL_SIZE, CELL_SIZE)
      ctx.strokeStyle = "#388E3C"
      ctx.strokeRect(segment.x * CELL_SIZE, segment.y * CELL_SIZE, CELL_SIZE, CELL_SIZE)
    })

    // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –µ–¥—ã
    ctx.fillStyle = "#F44336"
    ctx.beginPath()
    ctx.arc(food.x * CELL_SIZE + CELL_SIZE / 2, food.y * CELL_SIZE + CELL_SIZE / 2, CELL_SIZE / 2, 0, Math.PI * 2)
    ctx.fill()

    // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å–µ—Ç–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    ctx.strokeStyle = "rgba(0, 0, 0, 0.1)"
    for (let i = 0; i <= GRID_SIZE; i++) {
      ctx.beginPath()
      ctx.moveTo(i * CELL_SIZE, 0)
      ctx.lineTo(i * CELL_SIZE, GRID_SIZE * CELL_SIZE)
      ctx.stroke()

      ctx.beginPath()
      ctx.moveTo(0, i * CELL_SIZE)
      ctx.lineTo(GRID_SIZE * CELL_SIZE, i * CELL_SIZE)
      ctx.stroke()
    }
  }, [snake, food])

  // –°–±—Ä–æ—Å –∏–≥—Ä—ã
  const resetGame = () => {
    setSnake([
      { x: 10, y: 10 },
      { x: 9, y: 10 },
      { x: 8, y: 10 },
    ])
    setFood(generateFood())
    setDirection("RIGHT")
    setNextDirection("RIGHT")
    setScore(0)
    setGameOver(false)
    setIsPaused(false)
    setSpeed(INITIAL_SPEED)
  }

  // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ (–¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤)
  const handleDirectionButton = (newDirection: string) => {
    if (gameOver || isPaused) return

    switch (newDirection) {
      case "UP":
        if (direction !== "DOWN") setNextDirection("UP")
        break
      case "DOWN":
        if (direction !== "UP") setNextDirection("DOWN")
        break
      case "LEFT":
        if (direction !== "RIGHT") setNextDirection("LEFT")
        break
      case "RIGHT":
        if (direction !== "LEFT") setNextDirection("RIGHT")
        break
      default:
        break
    }
  }

  return (
    <Card>
      <CardHeader>
        <CardTitle>–ó–º–µ–π–∫–∞</CardTitle>
        <CardDescription>
          –£–ø—Ä–∞–≤–ª—è–π—Ç–µ –∑–º–µ–π–∫–æ–π —Å –ø–æ–º–æ—â—å—é —Å—Ç—Ä–µ–ª–æ–∫ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –∏–ª–∏ –∫–Ω–æ–ø–æ–∫. –°–æ–±–∏—Ä–∞–π—Ç–µ –µ–¥—É –∏ –Ω–µ –≤—Ä–µ–∑–∞–π—Ç–µ—Å—å –≤ —Å—Ç–µ–Ω—ã –∏–ª–∏ –≤
          —Å–µ–±—è.
        </CardDescription>
      </CardHeader>
      <CardContent>
        <div className="flex flex-col items-center">
          <div className="mb-4 flex items-center gap-4">
            <Badge variant="outline" className="text-sm">
              –°—á–µ—Ç: {score}
            </Badge>
            <Badge variant="outline" className="text-sm">
              –†–µ–∫–æ—Ä–¥: {highScore}
            </Badge>
            {gameOver && <Badge variant="destructive">–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞!</Badge>}
            {isPaused && !gameOver && <Badge variant="secondary">–ü–∞—É–∑–∞</Badge>}
          </div>

          <div className="relative mb-4">
            <canvas
              ref={canvasRef}
              width={GRID_SIZE * CELL_SIZE}
              height={GRID_SIZE * CELL_SIZE}
              className="border border-border"
            />
            {(gameOver || isPaused) && (
              <div className="absolute inset-0 flex items-center justify-center bg-background/80">
                <div className="text-center">
                  <h3 className="text-xl font-bold">{gameOver ? "–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞!" : "–ü–∞—É–∑–∞"}</h3>
                  {gameOver && <p className="mt-2">–í–∞—à —Å—á–µ—Ç: {score}</p>}
                  <Button onClick={gameOver ? resetGame : () => setIsPaused(false)} className="mt-4" variant="default">
                    {gameOver ? "–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ" : "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"}
                  </Button>
                </div>
              </div>
            )}
          </div>

          {/* –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ */}
          <div className="grid grid-cols-3 gap-2">
            <div></div>
            <Button
              variant="outline"
              className="h-12 w-12"
              onClick={() => handleDirectionButton("UP")}
              disabled={gameOver}
            >
              <ArrowUp className="h-6 w-6" />
            </Button>
            <div></div>
            <Button
              variant="outline"
              className="h-12 w-12"
              onClick={() => handleDirectionButton("RIGHT")}
              disabled={gameOver}
            >
              <ArrowRight className="h-6 w-6" />
            </Button>
            <Button
              variant="outline"
              className="h-12 w-12"
              onClick={() => handleDirectionButton("DOWN")}
              disabled={gameOver}
            >
              <ArrowDown className="h-6 w-6" />
            </Button>
            <div></div>
            <Button
              variant="outline"
              className="h-12 w-12"
              onClick={() => handleDirectionButton("LEFT")}
              disabled={gameOver}
            >
              <ArrowLeft className="h-6 w-6" />
            </Button>

// –¢–µ—Ç—Ä–∏—Å
function BlockBlastGame() {
  return (
    <Card>
      <CardHeader>
        <CardTitle>–¢–µ—Ç—Ä–∏—Å</CardTitle>
        <CardDescription>–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –∏–≥—Ä–∞-–≥–æ–ª–æ–≤–æ–ª–æ–º–∫–∞</CardDescription>
      </CardHeader>
      <CardContent>
        <p>–¢–µ—Ç—Ä–∏—Å –±—É–¥–µ—Ç –∑–¥–µ—Å—å</p>
      </CardContent>
      <CardFooter className="flex justify-center">
        <Button>–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ</Button>
      </CardFooter>
    </Card>
  )
}\
